#!/bin/sh -e

# https://www.gnu.org/prep/standards/html_node/Configuration.html

__die() {
	echo "Error: $*"
	exit 1
}

VALUES="BINDIR CC CFLAGS CFLAGS_COV CFLAGS_SAN CXX LD LIBS PREFIX SRCDIR"

__defaults() {
	# Variables may be specified in environment if not set via command-line.
	for VALUE in ${VALUES}; do
		case "${VALUE}" in
		BINDIR) ;;
		CC)
			CC=${CC:-cc}
			;;
		CFLAGS)
			CFLAGS=${CFLAGS:-}
			;;
		CFLAGS_COV)
			CFLAGS_COV=${CFLAGS_COV:-}
			;;
		CFLAGS_SAN)
			CFLAGS_SAN=${CFLAGS_SAN:-}
			;;
		CXX)
			CXX=${CXX:-g++}
			;;
		LD)
			LD=${LD:-ld}
			;;
		LIBS)
			LIBS=${LIBS:-}
			;;
		PREFIX)
			PREFIX=${PREFIX:-/usr/local}
			;;
		SRCDIR)
			SRCDIR=${SRCDIR:-$(dirname "$0")}
			;;
		*)
			__die "Internal error, missing default."
			;;
		esac
	done

	# Derived variables.
	for VALUE in ${VALUES}; do
		case "${VALUE}" in
		BINDIR)
			BINDIR=${BINDIR:-${PREFIX}/bin}
			;;
		esac
	done
}

__synopsis() {
	echo "usage: configure [OPTIONS...] [VAR=VALUE...]" >&2
}

__help() {
	# Ensure that we show our defaults, not customized values.
	# shellcheck disable=SC2086
	unset ${VALUES}

	__defaults

	cat <<EOF >&2
configure [OPTIONS...] [VAR=VALUE...]

Customize a project using directives from file "configure.in", and optionally
via the environment or through OPTIONS, in order to generate a makefile (from
file "Makefile.in") and configuration summary in file "config.status".

Functions:
	feature_test_macro COMPILER HEADER DEFINE API CODE
	find_header COMPILER HEADER DEFINE
	find_library NAME...
	populate DIR
	test_compiler_flags COMPILER VAR [OPTIONAL|REQUIRED] FLAGS...

Options:
	-h, --help		Show this help and exit.
	--bindir=BINDIR		Specify binary directory.
	--prefix=PREFIX		Specify installation prefix.
	--srcdir=SRCDIR		Specify source directory.

Defaults:
EOF

	for VALUE in ${VALUES}; do
		export LABEL="${VALUE}"
		export "${VALUE?}"
		sh -c 'echo "	$LABEL=$'"$VALUE"'"' >&2
	done

	cat <<EOF >&2

Example:
	CC=foo ./configure PREFIX=/bar --srcdir=/baz
EOF
}

# Show help, if requested, *before* processing anything else.
for OPT in "$@"; do
	case "${OPT}" in
	-h | --help)
		__help
		exit 0
		;;
	esac
done

for OPT in "$@"; do
	# Variables may be set via a flag '--key=VALUE' or assignment "KEY=VALUE".
	case "${OPT}" in
	--bindir=*)
		BINDIR=${OPT#*=}
		;;
	--prefix=*)
		PREFIX=${OPT#*=}
		;;
	--srcdir=*)
		SRCDIR=${OPT#*=}
		;;
	-*)
		__synopsis
		exit 1
		;;
	*=*)
		KEY="${OPT%=*}"
		VALUE="${OPT#*=}"
		eval "$KEY=\"$VALUE\""
		;;
	*)
		__synopsis
		exit 1
		;;
	esac
done

__defaults

# Also look for sources in "..".
[ "${SRCDIR}" = "." ] && [ ! -f "${SRCDIR}/Makefile.in" ] && SRCDIR=".."

# SRCDIR must contain sources.
[ -f "${SRCDIR}/Makefile.in" ] || __die "Please set SRCDIR in environment or via '--srcdir' option."

__tidy() {
	rm -rf "${WORKDIR}"
}

trap __tidy EXIT

# Source directory.
S="$(cd "${SRCDIR}" && pwd)"

# Build directory.
B="$(pwd)"

# Place to run probe commands.
WORKDIR="$(mktemp -d)"

# Remove left-over configuration (out-of-tree and in-tree).
rm -f Makefile "${S}/Makefile"
rm -f config.status "${S}/config.status"

# Populate out-of-tree sources since POSIX make does not support VPATH.
__populate() {
	DIR="$1"

	if [ ! "${S}" = "${B}" ]; then
		DIR="$(cd "${DIR}" && pwd)"
		SUB="${DIR#"${S}/"}"
		[ -n "${SUB}" ] && [ ! "${S}" = "${SUB}" ] && echo "mkdir -p \"${SUB}\""

		for ENTRY in "${DIR}"/*; do
			if [ -f "${ENTRY}" ]; then
				echo "ln -sf \"${ENTRY}\" \"${ENTRY#"${S}/"}\""
			fi
		done
	fi
}

__cache_status() {
	echo "#!/bin/sh"
	echo "# Auto-generated by configure script."
	echo

	for VALUE in ${VALUES}; do
		export LABEL="${VALUE}"
		export "${VALUE?}"

		# U-0027 APOSTROPHE Must be escaped in order to be preserved through the sub-shell.
		# Use S and D to simplify the invocation.
		sh -c 'S=$(printf "\047"); D=$(printf "\042"); echo $LABEL=$S$(echo $'"$VALUE"' |sed s/$S/$S$D$S$D$S/g)$S'
	done
	echo

	# Make argument sed safe.
	# - Escape backslash.
	# - Escape ampersand.
	echo "escape() {"
	printf "\techo %s |sed -e s/'%s'/'%s'/g -e \"s/%s/%s/g\"\n" '"$*"' '\(\\\)' '\\\1' '\\&' '\\\\&'
	echo "}"
	echo

	# Transform placeholders, using sed with SOH as a delimiter.
	# shellcheck disable=SC2016
	printf "SOH=%s\n" '"$(printf "\001")"'
	echo "sed \\"
	for VALUE in ${VALUES}; do
		# shellcheck disable=SC2016
		printf "\t-e s%s@${VALUE}@%s\"%s${VALUE}%s\"%sg \\\\\n" '${SOH}' '${SOH}' '$(escape ${' '})' '${SOH}'
	done
	echo '	"'"${SRCDIR}/Makefile.in"'" > Makefile'
	echo

	for DIR in ${POPULATED}; do
		__populate "${DIR}"
	done
}

__pkg_config_variable_append() {
	ARG="$1"
	NAME="$2"
	VAR="$3"

	# Word splitting, preserving escapes.
	eval "set -- $(pkg-config "$ARG" "$NAME" | sed 's/\\/\\\\\\/g')"
	for WORD in "$@"; do
		# Avoid duplicates.
		echo "${VAR}" | grep -E -q -- "(^| )${WORD}( |$)" || VAR="${VAR} ${WORD}"
	done
	echo "${VAR}"
}

find_library() {
	for NAME in "$@"; do
		pkg-config "${NAME}" 2>/dev/null || __die "Cannot find package configuration for library: '${NAME}'."

		CFLAGS="$(__pkg_config_variable_append --cflags "${NAME}" "${CFLAGS}")"
		LIBS="$(__pkg_config_variable_append --libs "${NAME}" "${LIBS}")"
	done
}

__filename_of() {
	COMPILER="$1"

	case "${COMPILER}" in
	g++ | clang++)
		echo "probe.cpp"
		;;
	*)
		echo "probe.c"
		;;
	esac
}

find_header() {
	COMPILER="$1"
	NAME="$2"
	DEFINE="$3"

	cd "${WORKDIR}"

	PROBE="$(__filename_of "${COMPILER}")"
	cat <<EOF >"${PROBE}"
#include <${NAME}>
int main(void) {}
EOF

	if "${COMPILER}" "${PROBE}" -o /dev/null 2>/dev/null; then
		echo "Has $NAME"
		CFLAGS="${CFLAGS} -D${DEFINE}"
	else
		echo "No $NAME"
	fi

	cd "${B}"
}

__flag_append() {
	VAR="$1"
	shift
	FLAG="$*"

	# U-0022 QUOTATION MARK must be escaped in order to be preserved through `eval'.
	# Example: eval 'CFLAGS="$CFLAGS --dd \"\""'
	D=$(printf "\042")
	eval "${VAR}"='"$'"$VAR $(echo "$*" | sed s/\\"$D"/\\\\"$D"/g)"'"'
}

test_compiler_flags() {
	COMPILER="$1"
	shift
	VAR="$1"
	shift
	REQUIRED="$1"
	shift

	cd "${WORKDIR}"

	PROBE="$(__filename_of "${COMPILER}")"
	cat <<EOF >"${PROBE}"
int main(void){}
EOF

	# Detect supported flags
	for FLAG in "$@"; do
		# shellcheck disable=SC2086
		if ${COMPILER} ${FLAG} "${PROBE}" 2>/dev/null; then
			echo "${COMPILER} supports ${FLAG}"
			__flag_append "${VAR}" "${FLAG}"
		elif [ "${REQUIRED}" = "REQUIRED" ]; then
			__die "${COMPILER} does not support ${FLAG}"
		else
			echo "${COMPILER} does not support ${FLAG}"
		fi
	done

	cd "${B}"
}

feature_test_macro() {
	COMPILER="$1"
	HEADER="$2"
	DEFINE="$3"
	API="$4"
	CODE="$5"

	cd "${WORKDIR}"

	PROBE="$(__filename_of "${COMPILER}")"
	cat <<EOF >"${PROBE}"
#undef ${DEFINE}
#include <${HEADER}>
int main(void) { ${CODE} }
EOF

	if "${COMPILER}" -Werror "${PROBE}" -o /dev/null 2>/dev/null; then
		echo "${COMPILER} has ${API}"
	else
		sed -i -e s/undef/define/ "${PROBE}"

		if "${COMPILER}" -Werror "${PROBE}" -o /dev/null 2>/dev/null; then
			echo "${COMPILER} has ${HEADER} ${DEFINE} ${API}"
			CFLAGS="${CFLAGS} -DHAS_$(echo "${API}" | tr '[:lower:]' '[:upper:]')_GNU_SOURCE"
		else
			__die "${COMPILER} missing ${API}"
		fi
	fi

	cd "${B}"
}

populate() {
	POPULATED="${POPULATED} $*"
}

# shellcheck disable=SC1091
. "${S}/configure.in"

__cache_status >config.status
chmod +x config.status
./config.status
